#!/usr/bin/python3

###############################################################
### PROJECT:
### cpdf - The PDF Compressor
### SCRIPT:
### cpdf
### VERSION:
### v1.2.1
### DESCRIPTION:
### A script to make compressing pdf files more easily by
### automating gs commands
### LOCATION:
### This should be placed in a bin dir of your choice
### MAINTAINED BY:
### hkdb <hkdb@3df.io>
### ############################################################

import os, datetime, sys, glob, re

number_of_args = len(sys.argv)

types = ["screen", "ebook", "printer", "prepress", "default"]

normal = '\033[0m'
bold = '\033[1;37m'
red = '\033[91m'
yellow = '\033[1;36m'

def error_msg(text):
    print(f" {red} ERROR:{normal}", text)


def ask_confirm(question):
             confirm = raw_input(question)
             if confirm == "No" or confirm == "no" or confirm == "N" or confirm == "n":
                 print("\nGood catch huhn? Exiting...\n")
                 sys.exit()
             else:
                 print("I don't understand your input. Exiting...\n")
                 sys.exit()
    
    
# Argument Handling
if number_of_args <= 1:
    print(f""" {red} ERROR:{normal}
    This script only takes 3 specific
    arguments. Use the "help" argument to learn more.
""")
    sys.exit()
first_arg = str(sys.argv[1])
if first_arg == "help":
    print(f"""This is a script to compress a pdf file with the convention of:

{bold}  cpdf [type] [input file name] [output file name] {normal} 

  where {bold}type{normal} is one of:

    {bold}screen{normal}   - low-resolution output similar to Acrobat Distiller \"Screen Optimized\" setting.
    {bold}ebook{normal}    - medium-resolution output similar to Acrobat Distiller \"eBook\" setting.
    {bold}printer{normal}  - output similar to the Acrobat Distiller \"Print Optimized\" setting.
    {bold}prepress{normal} - output similar to Acrobat Distiller \"Prepress Optimized\" setting.
    {bold}default{normal}  - output intended to be useful across a wide variety of uses,
               possibly at the expense of a larger output file.
""")
    sys.exit()
if first_arg == "version":
    print(f"{bold} \ncPDF v1.2.1\n {normal}")
    sys.exit()
if number_of_args != 4:
    error_msg("This script only takes 3 specific arguments. Use the \"help\" argument to learn more.")
    sys.exit()

compression_type = str(sys.argv[1])
input_file = str(sys.argv[2])
output_file = str(sys.argv[3])

    
if first_arg not in types:
    error_msg(" Incorrect compression type. Please use the \"help\" argument to learn more.")
    sys.exit()
elif not input_file.endswith(".pdf"):
    error_msg("The specified input file needs to be a pdf file. However, your file does not end with a \".pdf\" extension\n")
elif input_file == output_file:
    error_msg("The input file name must not be the same as the output file name. Please use the \"help\" argument to learn more.\n")
    sys.exit()
elif input_file == None or output_file == None:
     error_msg(" Incorrect arguments. Please use the \"help\" argument to learn more.\n")
     sys.exit()
else:
    if re.search('[\\\\\|:;\`]', input_file):
        error_msg("Input file contains invalid characters such as / \\ : ; \`.... Exiting...\n")
        sys.exit()
        # Check to make sure that the output file name is safe
    if re.search('[\\\\\|:;\`]', outFile):
        error_msg("Output file contains invalid characters such as / \\ : ; \`.... Exiting...\n")
        sys.exit()

    if os.path.isfile(outFile):
        if not outFile.endswith(".pdf"):
            ask = f"\n  {yellow} WARNING: {normal}\"{outFile}\" does not end with \.pdf\. Are you sure you want to continue? (y/n)"
            ask_confirm(ask)
            ask = f"\n  {yellow} WARNING: {normal}\"{outFile}\" already exists. Are you sure you want to overwrite it? (y/n)"
            ask_confirm(ask)

os.system(f"gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.6 -dPDFSETTINGS=/{compression_type}  -dNOPAUSE -dQUIET -dBATCH -sOutputFile=\"{outFile}\" \"{inFile}\"")
print("\nCompressed!\n")
